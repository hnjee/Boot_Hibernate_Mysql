## DataSource 연결 정보
#spring.datasource.username=user02
#spring.datasource.password=user02
#spring.datasource.url=jdbc:mysql://localhost:3306/user02
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.profiles.include=db

## -------------------------------------------------------------
## Hibernate 설정 
## table 생성
spring.jpa.hibernate.ddl-auto=none
# create 		: 기존 테이블 삭제 후 다시 생성
# create-drop 	: create과 같으나  어플리케이션 종료시점에 table을 drop시킴
# update 		: 변경된 부분만 적용
# validate 		: 엔티티(VO)와 테이블이 정상적으로 매핑되었는지 확인 
# none			: 사용하지 않을 때 
# 개발시에는 편의를 위해 create, create-drop을 사용
# 운영시에는 update, validate, none을 사용 

## -------------------------------------------------------------
## VO 클래스의 멤버변수명이 자동으로 DB에 컬럼명과 연결될 때
# camel case: 설정 필요O (regDate)
# snake case: 설정 필요X (reg_date)
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
 
## -------------------------------------------------------------
# JPA에 의해 자동으로 생성되고 실행되는 SQL문을 실시간으로 출력하는 설정
logging.level.org.hibernate.sql=debug

# ?에 맵핑되는 파라미터값을 출력
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Hibernate가 실행한 sql출력 
spring.jpa.show-sql=true

# Hibernate가 실행한 sql을 출력할 때 보기 좋게 출력
spring.jpa.properties.hibernate.format_sql=true

# transaction 처리
spring.aop.proxy-target-class=true 

## ----------------------------------------------------------
## JSP View 연결
# pom.xml에 jstl과 jasper 추가 확인
# /WEB-INF/views/ 폴더들은 webapp 아래에 직접 만들어줘야함 
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

## ----------------------------------------------------------
## message
# message 파일의 위치
spring.messages.basename=message/message
# encoding 설정 
spring.messages.encoding=UTF-8

# 메시지 코드(키)가 없는 경우
# 예외를 발생시키지 않고 코드 자체를 출력
spring.messages.use-code-as-default-message=true

# false 예외 발생
# properties 파일의 변경을 감지할 시간 간격
spring.messages.cache-duration=60
